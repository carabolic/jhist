/*******************************************************************************
 * Copyright 2013 DIMA Research Group, TU Berlin (http://www.dima.tu-berlin.de)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package de.tu_berlin.dima.jhist.stat;

/**
 * This interface represents a discrete distribution. Provides methods to
 * calculate the probability and cumulative probability.
 * <br />
 * All implementing classes have to guarantee that the methods
 * {@link #probability(Object)} and {@link #cumulativeProbability(Object)} are
 * defined for all values generated by {@link #values()}.
 * 
 * @see {@link Domain}
 * 
 * @author Christoph Br√ºcke (christoph.bruecke@campus.tu-berlin.de)
 *
 * @param <T>
 */
public interface Distribution<T> {

  /**
   * Returns the probability mass of the value.
   * <br />
   * The following rules need to be satisfied for all probabilities <code>p</code>:
   * <ul>
   *   <li><code>0 &leq; p &leq; 1<code></li>
   *   <li><code>p_0 + p_1 + ... + p_n = 1</code></li>
   * </ul>
   * @param value
   * @return
   */
  double probability(T value);

  /**
   * Returns the cumulative probability mass of the value.
   * <br />
   * The following conditions hold for all cumulative probabilities
   * <code>F</code>:
   * <ul>
   *   <li><code>0 &leq; F &leq; 1</code></li>
   *   <li><code>F(max) = 1</code></li>
   *   <li><code>F(min) = p(min)</code></li>
   * </ul>
   * @param value
   * @return
   */
  double cumulativeProbability(T value);

  /**
   * Returns all values that are covered by this domain in order.
   * @return
   */
  Iterable<T> values();

}
